
import java.util.Map;

//Riddle: 100 numbered prisoners must find their own numbers in one of 100 drawers in order to survive.
//Each prisoner may open only 50 drawers and cannot communicate with other prisoners.
//This program is for exploring variations on the riddle and various guessing strategies.

public class RiddleApp {

	public static void main(String[] args) {
//		FirstHalf test1 = new FirstHalf(new RiddleTrials(new RiddleScenario(100, 100, 50), 100));
//		test1.runTrials();
//		test1.printResultTotals();
		
//		TESTS:
//		Drawers draw = new Drawers(10);
//		System.out.println(draw.toString());
//		
//		Prisoners prisTest = new Prisoners(10);
//		System.out.println(prisTest.aliveResultsLong());
//		prisTest.setOnePrisoner(3, "dead");
//		System.out.println(prisTest.aliveResultsLong());
//		System.out.println(prisTest.aliveResultsTotals());
		
//		RiddleScenario riddle = new RiddleScenario(10, 10, 5);
//		System.out.println(riddle.getDrawers().toString());
//		System.out.println(riddle.getPrisoners().aliveResultsLong());
//		riddle.getPrisoners().setOnePrisoner(3, "dead");
//		System.out.println(riddle.getPrisoners().aliveResultsLong());
		
//		RiddleTrials trial = new RiddleTrials(new RiddleScenario(10, 10, 5), 2);
//		System.out.println(trial.getTrialList().get(1).getPrisoners().aliveResultsLong());
//		System.out.println(trial.getTrialList().get(2).getPrisoners().aliveResultsLong());
////		
//		trial.getTrialList().get(1).getPrisoners().setOnePrisoner(3, "dead");
//		System.out.println(trial.getTrialList().get(1).getPrisoners().aliveResultsLong());
//		trial.getTrialList().get(2).getPrisoners().setOnePrisoner(3, "alive");
//		System.out.println(trial.getTrialList().get(2).getPrisoners().aliveResultsLong());
//		System.out.println(trial.getTrialList().get(1).getPrisoners().aliveResultsTotals());
//		System.out.println(trial.getTrialList().get(2).getPrisoners().aliveResultsTotals());
		
		FirstHalf firstHalf = new FirstHalf(new RiddleScenario(10, 10, 5));
		System.out.println(firstHalf.getTrials().getTrialList().get(1).getNumberOfPrisoners());
		
//		stratTest.runTrials();
//		stratTest.printResultLong();
//		stratTest.printResultTotals();
		
//		public void runTrials() {
//			for (int i = 1; i <= trials.getTrialList().get(i).getNumberOfPrisoners(); i++) {
//				for (int j = 1; j <= trials.getTrialList().get(i).getMaxGuesses(); j++) {
//					if (trials.getTrialList().get(i).getDrawers().getDrawerNumbers().get(j) == i) {
//						trials.getTrialList().get(i).getPrisoners().setOnePrisoner(i, "alive");
//						break;
//					}
//				}
//				if (trials.getTrialList().get(i).getPrisoners().getAliveOrDeadMap().get(i).equals("waiting")) {
//					trials.getTrialList().get(i).getPrisoners().setOnePrisoner(i, "dead");
//				}
//			}
//		}
	}
}
